
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002f  00800100  00800100  0000022a  2**0
                  ALLOC
  2 .stab         00000834  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000009c  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000048  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002bc  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015a  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000143  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f2  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  9e:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
uint16_t buffer;

/* This function sets the address */
void init(){

	cli(); // clear interrupts
  a6:	f8 94       	cli
	init_twi_slave(SLAVE_ADDR);
  a8:	80 e5       	ldi	r24, 0x50	; 80
  aa:	0e 94 59 00 	call	0xb2	; 0xb2 <init_twi_slave>
	sei(); // set enable interrupts
  ae:	78 94       	sei

}
  b0:	08 95       	ret

000000b2 <init_twi_slave>:
#define TWCR_RESET 	TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC);  

//########################################################################################## init_twi_slave 
void init_twi_slave(uint8_t adr)
{
	TWAR= adr; //Adresse setzen
  b2:	80 93 ba 00 	sts	0x00BA, r24
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
  b6:	ec eb       	ldi	r30, 0xBC	; 188
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	80 83       	st	Z, r24
	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE); 	
  c0:	80 81       	ld	r24, Z
  c2:	85 64       	ori	r24, 0x45	; 69
  c4:	80 83       	st	Z, r24
	buffer_adr=0xFF;  
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	80 93 00 01 	sts	0x0100, r24
	sei();
  cc:	78 94       	sei
}
  ce:	08 95       	ret

000000d0 <__vector_24>:

//########################################################################################## ISR (TWI_vect) 
//ISR, die bei einem Ereignis auf dem Bus ausgelöst wird. Im Register TWSR befindet sich dann 
//ein Statuscode, anhand dessen die Situation festgestellt werden kann.
ISR (TWI_vect)  
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	uint8_t data=0;
	switch (TW_STATUS) 								// TWI-Statusregister prüfen und nötige Aktion bestimmen 
  e2:	80 91 b9 00 	lds	r24, 0x00B9
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	90 70       	andi	r25, 0x00	; 0
  ec:	80 38       	cpi	r24, 0x80	; 128
  ee:	91 05       	cpc	r25, r1
  f0:	a9 f0       	breq	.+42     	; 0x11c <__vector_24+0x4c>
  f2:	81 38       	cpi	r24, 0x81	; 129
  f4:	91 05       	cpc	r25, r1
  f6:	24 f4       	brge	.+8      	; 0x100 <__vector_24+0x30>
  f8:	80 36       	cpi	r24, 0x60	; 96
  fa:	91 05       	cpc	r25, r1
  fc:	e9 f5       	brne	.+122    	; 0x178 <__vector_24+0xa8>
  fe:	07 c0       	rjmp	.+14     	; 0x10e <__vector_24+0x3e>
 100:	88 3a       	cpi	r24, 0xA8	; 168
 102:	91 05       	cpc	r25, r1
 104:	01 f1       	breq	.+64     	; 0x146 <__vector_24+0x76>
 106:	88 3b       	cpi	r24, 0xB8	; 184
 108:	91 05       	cpc	r25, r1
 10a:	b1 f5       	brne	.+108    	; 0x178 <__vector_24+0xa8>
 10c:	1c c0       	rjmp	.+56     	; 0x146 <__vector_24+0x76>
		{
		case TW_SR_SLA_ACK: 						// 0x60 Slave Receiver, wurde adressiert	
			TWCR_ACK; 								// nächstes Datenbyte empfangen, ACK danach
 10e:	85 ec       	ldi	r24, 0xC5	; 197
 110:	80 93 bc 00 	sts	0x00BC, r24
			buffer_adr=0xFF; 						// Bufferposition ist undefiniert
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	80 93 00 01 	sts	0x0100, r24
			break;
 11a:	31 c0       	rjmp	.+98     	; 0x17e <__vector_24+0xae>

		case TW_SR_DATA_ACK: 						// 0x80 Slave Receiver,Daten empfangen
			data=TWDR; 								// Empfangene Daten auslesen
 11c:	80 91 bb 00 	lds	r24, 0x00BB
			if (buffer_adr == 0xFF) 				// erster Zugriff, Bufferposition setzen
 120:	90 91 00 01 	lds	r25, 0x0100
 124:	9f 3f       	cpi	r25, 0xFF	; 255
 126:	41 f4       	brne	.+16     	; 0x138 <__vector_24+0x68>
				{
					if(data<=buffer_size)			// Kontrolle ob gewünschte Adresse im erlaubten bereich
 128:	85 31       	cpi	r24, 0x15	; 21
 12a:	18 f4       	brcc	.+6      	; 0x132 <__vector_24+0x62>
						{
							buffer_adr= data; 		// Bufferposition wie adressiert setzen
 12c:	80 93 00 01 	sts	0x0100, r24
 130:	23 c0       	rjmp	.+70     	; 0x178 <__vector_24+0xa8>
						}
					else
						{
						buffer_adr=0; 				// Adresse auf Null setzen. Ist das sinnvoll?
 132:	10 92 00 01 	sts	0x0100, r1
 136:	20 c0       	rjmp	.+64     	; 0x178 <__vector_24+0xa8>
						}				
					TWCR_ACK;						// nächstes Datenbyte empfangen, ACK danach, um nächstes Byte anzufordern
				}
			else 									// weiterer Zugriff, Daten empfangen
				{
					rxbuffer[buffer_adr]=data; 		// Daten in Buffer schreiben
 138:	e0 91 00 01 	lds	r30, 0x0100
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e5 5e       	subi	r30, 0xE5	; 229
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	80 83       	st	Z, r24
 144:	0e c0       	rjmp	.+28     	; 0x162 <__vector_24+0x92>
			break;

		case TW_ST_SLA_ACK: 						//
		case TW_ST_DATA_ACK: 						// 0xB8 Slave Transmitter, weitere Daten wurden angefordert

			if (buffer_adr == 0xFF) 				// zuvor keine Leseadresse angegeben! 
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	8f 3f       	cpi	r24, 0xFF	; 255
 14c:	11 f4       	brne	.+4      	; 0x152 <__vector_24+0x82>
				{
					buffer_adr=0;
 14e:	10 92 00 01 	sts	0x0100, r1
				}	
			TWDR = txbuffer[buffer_adr]; 			// Datenbyte senden 
 152:	e0 91 00 01 	lds	r30, 0x0100
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	eb 5f       	subi	r30, 0xFB	; 251
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 81       	ld	r24, Z
 15e:	80 93 bb 00 	sts	0x00BB, r24
			buffer_adr++; 							// bufferadresse für nächstes Byte weiterzählen
 162:	80 91 00 01 	lds	r24, 0x0100
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 00 01 	sts	0x0100, r24
			if(buffer_adr<(buffer_size-1)) 		// im Buffer ist mehr als ein Byte, das gesendet werden kann
 16c:	80 91 00 01 	lds	r24, 0x0100
 170:	83 31       	cpi	r24, 0x13	; 19
 172:	10 f0       	brcs	.+4      	; 0x178 <__vector_24+0xa8>
				{
					TWCR_ACK; 						// nächstes Byte senden, danach ACK erwarten
				}
			else
				{
					TWCR_NACK; 						// letztes Byte senden, danach NACK erwarten
 174:	85 e8       	ldi	r24, 0x85	; 133
 176:	01 c0       	rjmp	.+2      	; 0x17a <__vector_24+0xaa>
		case TW_ST_DATA_NACK: 						// 0xC0 Keine Daten mehr gefordert 
		case TW_SR_DATA_NACK: 						// 0x88 
		case TW_ST_LAST_DATA: 						// 0xC8  Last data byte in TWDR has been transmitted (TWEA = 0); ACK has been received
		case TW_SR_STOP: 							// 0xA0 STOP empfangen
		default: 	
			TWCR_RESET; 							// Übertragung beenden, warten bis zur nächsten Adressierung
 178:	85 ec       	ldi	r24, 0xC5	; 197
 17a:	80 93 bc 00 	sts	0x00BC, r24
			break;	
		} //end.switch (TW_STATUS)
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <main>:

/* main is here! */
int main(){
	
	init();
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
		var1 = rxbuffer[0];
		var2 = rxbuffer[1];

		//send Feedback
		if((var1 == 42) && (var2 == 23)){
			txbuffer[0] = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
	init();

	while(1){

		// receiving two bytes of data (supposed to be 42 and 23)
		var1 = rxbuffer[0];
 196:	20 91 1b 01 	lds	r18, 0x011B
		var2 = rxbuffer[1];
 19a:	90 91 1c 01 	lds	r25, 0x011C

		//send Feedback
		if((var1 == 42) && (var2 == 23)){
 19e:	2a 32       	cpi	r18, 0x2A	; 42
 1a0:	29 f4       	brne	.+10     	; 0x1ac <main+0x1c>
 1a2:	97 31       	cpi	r25, 0x17	; 23
 1a4:	19 f4       	brne	.+6      	; 0x1ac <main+0x1c>
			txbuffer[0] = 1;
 1a6:	80 93 05 01 	sts	0x0105, r24
 1aa:	f5 cf       	rjmp	.-22     	; 0x196 <main+0x6>
		}
		else{
			txbuffer[0] = 0;
 1ac:	10 92 05 01 	sts	0x0105, r1
 1b0:	f2 cf       	rjmp	.-28     	; 0x196 <main+0x6>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
